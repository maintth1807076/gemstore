@model GemStore.Models.ItemViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<form class="modal multi-step" id="demo-modal-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title step-1" data-step="1">Add Stone Property</h4>
                <h4 class="modal-title step-2" data-step="2">Add Diamond Property</h4>
            </div>
            <div class="modal-body step step-1">
                @Html.Partial("_StoneMstViewPartial", Model.StoneMstView)

                @*@Html.DropDownList("StoneQltyId", null, htmlAttributes: new {@class = "form-control"})*@
                
            </div>
            <div class="modal-body step step-2">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary step step-1" data-step="1" onclick="sendEvent('#demo-modal-1', 2)">Continue</button>
                <button type="button" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-1', 1)">Back</button>
                <button type="button" class="btn btn-primary step step-2" data-step="2" onclick="sendEvent('#demo-modal-1', 2)">Create</button>
            </div>
        </div>
    </div>
</form>
@*@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    

    <div class="form-horizontal">
        <h4>ItemMst</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.StyleCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StyleCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StyleCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pairs, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Pairs, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Pairs, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BrandId, "BrandId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BrandId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CatId, "CatId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CatId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CatId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProdQuantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProdQuantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProdQuantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CertifyId, "CertifyId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CertifyId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CertifyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProdId, "ProdId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProdId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProdId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GoldTypeId, "GoldTypeId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GoldTypeId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GoldTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GoldWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GoldWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GoldWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoneWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StoneWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StoneWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NetGold, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NetGold, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NetGold, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WstgPer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WstgPer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WstgPer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotGrossWt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotGrossWt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotGrossWt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GoldRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GoldRate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GoldRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GoldAmt, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GoldAmt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GoldAmt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GoldMaking, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GoldMaking, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GoldMaking, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StoneMaking, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StoneMaking, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StoneMaking, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OtherMaking, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OtherMaking, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OtherMaking, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotMaking, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotMaking, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotMaking, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MRP, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MRP, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MRP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalePrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalePrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Thumbnails, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Thumbnails, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Thumbnails, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JewelleryId, "JewelleryId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("JewelleryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.JewelleryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <button class="btn btn-default" data-toggle="modal" data-target="#demo-modal-1">Continue</button>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}*@

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section scripts
{
    <script>
        +function ($) {
            'use strict';

            var modals = $('.modal.multi-step');

            modals.each(function (idx, modal) {
                var $modal = $(modal);
                var $bodies = $modal.find('div.modal-body');
                var total_num_steps = $bodies.length;
                var $progress = $modal.find('.m-progress');
                var $progress_bar = $modal.find('.m-progress-bar');
                var $progress_stats = $modal.find('.m-progress-stats');
                var $progress_current = $modal.find('.m-progress-current');
                var $progress_total = $modal.find('.m-progress-total');
                var $progress_complete = $modal.find('.m-progress-complete');
                var reset_on_close = $modal.attr('reset-on-close') === 'true';

                function reset() {
                    $modal.find('.step').hide();
                    $modal.find('[data-step]').hide();
                }

                function completeSteps() {
                    $progress_stats.hide();
                    $progress_complete.show();
                    $modal.find('.progress-text').animate({
                        top: '-2em'
                    });
                    $modal.find('.complete-indicator').animate({
                        top: '-2em'
                    });
                    $progress_bar.addClass('completed');
                }

                function getPercentComplete(current_step, total_steps) {
                    return Math.min(current_step / total_steps * 100, 100) + '%';
                }

                function updateProgress(current, total) {
                    $progress_bar.animate({
                        width: getPercentComplete(current, total)
                    });
                    if (current - 1 >= total_num_steps) {
                        completeSteps();
                    } else {
                        $progress_current.text(current);
                    }

                    $progress.find('[data-progress]').each(function () {
                        var dp = $(this);
                        if (dp.data().progress <= current - 1) {
                            dp.addClass('completed');
                        } else {
                            dp.removeClass('completed');
                        }
                    });
                }

                function goToStep(step) {
                    reset();
                    var to_show = $modal.find('.step-' + step);
                    if (to_show.length === 0) {
                        // at the last step, nothing else to show
                        return;
                    }
                    to_show.show();
                    var current = parseInt(step, 10);
                    updateProgress(current, total_num_steps);
                    findFirstFocusableInput(to_show).focus();
                }

                function findFirstFocusableInput(parent) {
                    var candidates = [parent.find('input'), parent.find('select'),
                    parent.find('textarea'), parent.find('button')],
                        winner = parent;
                    $.each(candidates, function () {
                        if (this.length > 0) {
                            winner = this[0];
                            return false;
                        }
                    });
                    return $(winner);
                }

                function bindEventsToModal($modal) {
                    var data_steps = [];
                    $('[data-step]').each(function () {
                        var step = $(this).data().step;
                        if (step && $.inArray(step, data_steps) === -1) {
                            data_steps.push(step);
                        }
                    });

                    $.each(data_steps, function (i, v) {
                        window.addEventListener('next.m.' + v, function (evt) {
                            goToStep(evt.detail.step);
                        }, false);
                    });
                }

                function initialize() {
                    reset();
                    updateProgress(1, total_num_steps);
                    $modal.find('.step-1').show();
                    $progress_complete.hide();
                    $progress_total.text(total_num_steps);
                    bindEventsToModal($modal, total_num_steps);
                    $modal.data({
                        total_num_steps: $bodies.length,
                    });
                    if (reset_on_close) {
                        //Bootstrap 2.3.2
                        $modal.on('hidden', function () {
                            reset();
                            $modal.find('.step-1').show();
                        })
                        //Bootstrap 3
                        $modal.on('hidden.bs.modal', function () {
                            reset();
                            $modal.find('.step-1').show();
                        })
                    }
                }

                initialize();
            })
        }(jQuery);
    </script>
    <script>
        $(document).ready(function () {
            console.log("ready!");
        });
        sendEvent = function (sel, step) {
            var sel_event = new CustomEvent('next.m.' + step, { detail: { step: step } });
            window.dispatchEvent(sel_event);
        }
    </script>
}